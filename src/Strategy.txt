-------------------------------------------------------------------
Git Branching Strategy
-------------------------------------------------------------------

> MASTER branch -> contains the stable application
-------------------------------------------------------------------

 > DEVELOP branch
-------------------------------------------------------------------
        o collect the updates before pushed to the master branch

        > feature-A
        > feature-B
-------------------------------------------------------------------

Flow from our SIDE:
    --> assume you cloned the project; make sure you update the project(up to date)
        o Create a new feature Branch LOCALLY from the DEVELOP branch; never MASTER
                > create some changes, then we commit and push to ORIGIN -> on the repo [GitHub] feature branch
        o create a pull request from your feature branch to the develop branch
            >> someone approves AND merges; this is PART of the team flow
        o repeat above steps for as many steps for as many feature or changes needed, until a stable ver of that
                    app, or the sprint finishes
         > team creates pull request from DEVELOP to MASTER
-------------------------------------------------------------------
Our team made changes to the develop branch.

    > How do we get those changes in order to continue working with those new changes
        > checkout to our local develop branch
        > update the branch (origin develop -> local develop)
        > checkout to our local feature branch
        > merged from local develop into local feature
____________________________________________________________

accept yours result
accept theirs
// html for cart page // team
members line
3 options to resolve the conflict
you accept your changes
you accept their changes
fix the conflict in the middle with mix of the code + merge
____________________________________________________________
Team Collaboration:
Team Lead:
> Create a new java project
> Create a .gitignore file and add the main folders to ignore
files: out, *.iml, .idea
> Create the remote repository by sharing the project
> Create a new branch from master called develop on the remote
repository

> Invite all team members by going to project settings -> access ->
collaborators

>>Other Team Members:
Go to email and accept invite to collaborate with the new repository
On the remote repository page find the code button and copy the
given link

> Use the given link from to clone the project
Now there is a remote repository and everyone has the project locally. Use
the flow we talked about for everyone to create their own branches and
create pull requests into develop branch

>> Steps to repeat:
Update local project with changes from other team members on remote
repository (develop branch)

In the local repositories create a new branch from develop branch
- for this practice use your name for each personal branch
Makes some changes by adding files or updating a file (work in
separate files to avoid conflicts)

Commit local changes and push to your origin branch (DO NOT PUSH TO
DEVELOP OR MASTER BRANCH)

On GitHub create a pull request to merge the changes from your
branch to the develop branch. Assign a team member to review and
approve
- If you are assigned a pull request view the
commits of your team members and if there is no problem approve the pull
request

Every team member should go through the flow with the team to do some
basic practice right now. When we start projects for automation you will
need to use the git flow on top of the automation you will need to do, so
practice the core git now without worrying about your tests.

Whole group:
When you feel there is enough commits made to the develop branch
make a pull request merge develop into the master branch
